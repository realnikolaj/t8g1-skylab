<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IT@T8G1-Skylab on Hosting, deployment and infrastructure services</title><link>https://realnikolaj.github.io/t8g1-skylab/</link><description>Recent content in IT@T8G1-Skylab on Hosting, deployment and infrastructure services</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://realnikolaj.github.io/t8g1-skylab/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://realnikolaj.github.io/t8g1-skylab/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://realnikolaj.github.io/t8g1-skylab/about/</guid><description>Group T8G1
Project Assignment
62501 Linux Server and Network Course at DTU, spring 2022 edition.</description></item><item><title>Topology</title><link>https://realnikolaj.github.io/t8g1-skylab/topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://realnikolaj.github.io/t8g1-skylab/topology/</guid><description>Topology 3. Topology We have now designed a sketch of our network topology, which can be seen in the picture above. In the diagram we show that we are hosting HUGO webserver in a docker container through subnet 10.81. We also used t8g1-ingress overlay network which has the benefits of automatically creating a subnet that of which, by our individual VM&amp;rsquo;s strict firewall rules See Security in section: nikolaj-vm, is isolated from the network and per docker&amp;rsquo;s generous trafic acceptance strategy as in: accepting anything and everything from anywhere to everywhere, effectively becomes a DMZ zone.</description></item><item><title>VM@Emin</title><link>https://realnikolaj.github.io/t8g1-skylab/emin-vm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://realnikolaj.github.io/t8g1-skylab/emin-vm/</guid><description/></item><item><title>VM@Group</title><link>https://realnikolaj.github.io/t8g1-skylab/group-vm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://realnikolaj.github.io/t8g1-skylab/group-vm/</guid><description>Group VM Squid 1. Installing Docker and moving squid into docker: Installing docker on our group vm requires carefull considerations regarding the security measure already implemented. If a rootless docker principle is not established on the docker host, any container running will have root privileges which isn&amp;rsquo;t really an issue for veteran sysadmins that knows have to restrict access to the docker daemon using aswell firewall or custom docker registries to allow only vetted and verified container images to run, but in the hands of non-experienced employee a non-rootless docker client will run any code within any docker image.</description></item><item><title>VM@Nikolaj</title><link>https://realnikolaj.github.io/t8g1-skylab/nikolaj-vm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://realnikolaj.github.io/t8g1-skylab/nikolaj-vm/</guid><description>Security Our reasonably hardened firewall doesn&amp;rsquo;t cover mitm attacks such as rouge services or containers, but by utilizing docker clients extensive nework measure and implementing the same overriding rule on each individual client running docker, we can lock back down all routes and isntead utilize the custom t8g1-ingress network created by a managing node such as Group VM or Nikolaj VM. Having two or more, managing nodes is highly recomend for fault taularance in case of e.</description></item><item><title>VM@Saif</title><link>https://realnikolaj.github.io/t8g1-skylab/saif-vm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://realnikolaj.github.io/t8g1-skylab/saif-vm/</guid><description/></item></channel></rss>